<!DOCTYPE html>
<html lang="tr">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>API Docs - <%= user.name %></title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=SF+Pro+Display:wght@300;400;500;600;700&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
            background: #f0f0f0;
            height: 100vh;
            overflow: hidden;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }

        .window {
            background: #ffffff;
            border-radius: 10px;
            margin: 20px;
            height: calc(100vh - 40px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        /* Window Controls */
        .window-controls {
            height: 52px;
            background: #f6f6f6;
            border-bottom: 1px solid #d1d1d1;
            display: flex;
            align-items: center;
            padding: 0 20px;
            position: relative;
        }

        .traffic-lights {
            display: flex;
            gap: 8px;
        }

        .traffic-light {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 0.5px solid rgba(0, 0, 0, 0.1);
        }

        .traffic-light.close { background: #ff5f57; }
        .traffic-light.minimize { background: #ffbd2e; }
        .traffic-light.maximize { background: #28ca42; }

        .title-separator {
            width: 1px;
            height: 16px;
            background: #d1d1d1;
            margin: 0 16px;
        }

        .window-title {
            font-size: 13px;
            font-weight: 500;
            color: #333;
            letter-spacing: -0.08px;
        }

        .window-controls-right {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .search-box {
            position: relative;
        }

        .search-input {
            width: 200px;
            height: 28px;
            border: 1px solid #c7c7c7;
            border-radius: 6px;
            padding: 0 12px 0 28px;
            font-size: 13px;
            background: white;
            outline: none;
            transition: border-color 0.15s ease;
        }

        .search-input:focus {
            border-color: #007aff;
        }

        .search-icon {
            position: absolute;
            left: 8px;
            top: 50%;
            transform: translateY(-50%);
            width: 14px;
            height: 14px;
            opacity: 0.5;
        }

        .search-dropdown {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border: 1px solid #d1d1d1;
            border-top: none;
            border-radius: 0 0 6px 6px;
            max-height: 300px;
            overflow-y: auto;
            z-index: 100;
            display: none;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }

        .search-dropdown.show {
            display: block;
        }

        .search-result {
            padding: 8px 12px;
            cursor: pointer;
            border-bottom: 1px solid #f0f0f0;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: background-color 0.15s ease;
        }

        .search-result:hover {
            background: #f0f0f0;
        }

        .search-result:last-child {
            border-bottom: none;
        }

        .search-result-method {
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 9px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            min-width: 40px;
            text-align: center;
        }

        .search-result-text {
            flex: 1;
        }

        .search-result-endpoint {
            font-family: 'SF Mono', Monaco, monospace;
            font-size: 12px;
            font-weight: 500;
            color: #333;
        }

        .search-result-description {
            font-size: 11px;
            color: #8e8e93;
            margin-top: 2px;
        }

        .logout-btn {
            width: 28px;
            height: 28px;
            border: 1px solid #c7c7c7;
            border-radius: 6px;
            background: white;
            color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.15s ease;
        }

        .logout-btn:hover {
            background: #ff3b30;
            color: white;
            border-color: #ff3b30;
        }

        .add-endpoint-btn {
            width: 28px;
            height: 28px;
            border: 1px solid #c7c7c7;
            border-radius: 6px;
            background: white;
            color: #333;
            font-size: 16px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.15s ease;
        }

        .add-endpoint-btn:hover {
            background: #f0f0f0;
        }

        .toolbar {
            height: 44px;
            background: #f6f6f6;
            border-bottom: 1px solid #d1d1d1;
            display: flex;
            align-items: center;
            padding: 0 16px;
            gap: 12px;
        }

        .toolbar-button {
            background: none;
            border: none;
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 13px;
            color: #333;
            cursor: pointer;
            transition: background-color 0.15s ease;
        }

        .toolbar-button:hover {
            background: #e5e5e5;
        }

        .toolbar-button.active {
            background: #007aff;
            color: white;
        }

        /* Main Content */
        .main-content {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        /* Sidebar */
        .sidebar {
            width: 280px;
            background: #f5f5f5;
            border-right: 1px solid #d1d1d1;
            overflow-y: auto;
            padding: 8px 0;
            display: flex;
            flex-direction: column;
        }

        .sidebar-content {
            flex: 1;
        }

        .sidebar-section {
            margin-bottom: 4px;
        }

        .section-header {
            padding: 8px 16px 4px 16px;
            font-size: 11px;
            font-weight: 600;
            color: #8e8e93;
            text-transform: uppercase;
            letter-spacing: 0.6px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            cursor: pointer;
            user-select: none;
        }

        .section-toggle {
            font-size: 10px;
            transition: transform 0.2s ease;
        }

        .section-header.collapsed .section-toggle {
            transform: rotate(-90deg);
        }

        .section-items {
            transition: all 0.2s ease;
            overflow: hidden;
        }

        .section-items.collapsed {
            max-height: 0;
        }

        .sidebar-item {
            display: flex;
            align-items: center;
            padding: 6px 16px;
            font-size: 13px;
            color: #333;
            cursor: pointer;
            transition: background-color 0.15s ease;
            position: relative;
        }

        .sidebar-item:hover {
            background: #e8e8e8;
        }

        .sidebar-item.selected {
            background: #007aff;
            color: white;
        }

        .sidebar-item.hidden {
            display: none;
        }

        .sidebar-item-text {
            flex: 1;
            margin-right: 8px;
        }

        .method-badge {
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .method-get { background: #007aff; color: white; }
        .method-post { background: #34c759; color: white; }
        .method-put { background: #ff9500; color: white; }
        .method-delete { background: #ff3b30; color: white; }

        /* Sidebar User Info */
        .sidebar-user {
            border-top: 1px solid #d1d1d1;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            gap: 10px;
            background: #f5f5f5;
        }

        .sidebar-user-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #007aff;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            font-weight: 600;
        }

        .sidebar-user-info {
            flex: 1;
        }

        .sidebar-user-name {
            font-size: 13px;
            font-weight: 500;
            color: #333;
            line-height: 1.2;
        }

        .sidebar-user-role {
            font-size: 11px;
            color: #8e8e93;
            text-transform: capitalize;
        }

        /* Content Area */
        .content-area {
            flex: 1;
            background: white;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .content-header {
            padding: 20px 24px 16px 24px;
            border-bottom: 1px solid #e5e5e5;
            background: #fafafa;
            position: relative;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 12px;
            font-size: 13px;
            color: #8e8e93;
        }

        .breadcrumb-item {
            cursor: pointer;
            transition: color 0.15s ease;
        }

        .breadcrumb-item:hover {
            color: #007aff;
        }

        .breadcrumb-separator {
            font-size: 10px;
        }

        .endpoint-title {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 8px;
        }

        .endpoint-method-large {
            padding: 6px 12px;
            border-radius: 6px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .endpoint-path-large {
            font-family: 'SF Mono', Monaco, 'Cascadia Code', monospace;
            font-size: 18px;
            font-weight: 500;
            color: #1d1d1f;
        }

        .endpoint-description {
            font-size: 14px;
            color: #666;
            line-height: 1.4;
        }

        .endpoint-actions {
            position: absolute;
            top: 20px;
            right: 24px;
            display: flex;
            gap: 8px;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border: 1px solid #d1d1d1;
            border-radius: 6px;
            background: white;
            color: #333;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.15s ease;
        }

        .action-btn:hover {
            background: #f0f0f0;
        }

        .action-btn.edit:hover {
            background: #007aff;
            color: white;
            border-color: #007aff;
        }

        .action-btn.delete:hover {
            background: #ff3b30;
            color: white;
            border-color: #ff3b30;
        }

        .content-body {
            flex: 1;
            padding: 24px;
        }

        .section {
            margin-bottom: 32px;
        }

        .section-title {
            font-size: 17px;
            font-weight: 600;
            color: #1d1d1f;
            margin-bottom: 16px;
            letter-spacing: -0.24px;
        }

        .param-table {
            background: #fafafa;
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            overflow: hidden;
        }

        .param-row {
            display: flex;
            padding: 12px 16px;
            border-bottom: 1px solid #e5e5e5;
        }

        .param-row:last-child {
            border-bottom: none;
        }

        .param-name {
            font-family: 'SF Mono', Monaco, monospace;
            font-size: 13px;
            font-weight: 600;
            color: #007aff;
            min-width: 140px;
            margin-right: 16px;
        }

        .param-description {
            font-size: 13px;
            color: #333;
            line-height: 1.4;
            flex: 1;
        }

        .code-block {
            background: #1d1d1f;
            color: #ffffff;
            padding: 20px;
            border-radius: 8px;
            font-family: 'SF Mono', Monaco, monospace;
            font-size: 13px;
            line-height: 1.5;
            overflow-x: auto;
            white-space: pre;
        }

        /* Roles Styling */
        .roles-container {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 12px;
        }

        .role-badge {
            padding: 6px 12px;
            border-radius: 16px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }

        .role-badge::before {
            content: "👤";
            font-size: 10px;
        }

        .role-guest {
            background: #f0f0f0;
            color: #666;
            border: 1px solid #d1d1d1;
        }

        .role-user {
            background: #e3f2fd;
            color: #1976d2;
            border: 1px solid #bbdefb;
        }

        .role-admin {
            background: #ffebee;
            color: #d32f2f;
            border: 1px solid #ffcdd2;
        }

        .role-moderator {
            background: #f3e5f5;
            color: #7b1fa2;
            border: 1px solid #e1bee7;
        }

        .role-developer {
            background: #e8f5e8;
            color: #2e7d32;
            border: 1px solid #c8e6c9;
        }

        .roles-description {
            font-size: 13px;
            color: #8e8e93;
            font-style: italic;
            line-height: 1.4;
        }

        /* Welcome State */
        .welcome-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            text-align: center;
            padding: 40px;
        }

        .welcome-icon {
            width: 64px;
            height: 64px;
            background: #f0f0f0;
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 16px;
            font-size: 24px;
        }

        .welcome-title {
            font-size: 22px;
            font-weight: 600;
            color: #1d1d1f;
            margin-bottom: 8px;
            letter-spacing: -0.26px;
        }

        .welcome-subtitle {
            font-size: 15px;
            color: #8e8e93;
            line-height: 1.4;
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal {
            background: white;
            border-radius: 12px;
            width: 500px;
            max-width: 90vw;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            padding: 20px 24px 16px 24px;
            border-bottom: 1px solid #e5e5e5;
        }

        .modal-title {
            font-size: 18px;
            font-weight: 600;
            color: #1d1d1f;
            margin-bottom: 4px;
        }

        .modal-subtitle {
            font-size: 14px;
            color: #8e8e93;
        }

        .modal-body {
            padding: 24px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-size: 14px;
            font-weight: 500;
            color: #333;
            margin-bottom: 6px;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #d1d1d1;
            border-radius: 6px;
            font-size: 14px;
            background: white;
            outline: none;
            transition: border-color 0.15s ease;
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            border-color: #007aff;
        }

        .form-textarea {
            resize: vertical;
            min-height: 80px;
        }

        .modal-footer {
            padding: 16px 24px 24px 24px;
            display: flex;
            gap: 12px;
            justify-content: flex-end;
        }

        .btn {
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.15s ease;
            border: none;
        }

        .btn-secondary {
            background: #f0f0f0;
            color: #333;
        }

        .btn-secondary:hover {
            background: #e0e0e0;
        }

        .btn-primary {
            background: #007aff;
            color: white;
        }

        .btn-primary:hover {
            background: #0056cc;
        }

        .btn-danger {
            background: #ff3b30;
            color: white;
        }

        .btn-danger:hover {
            background: #d70015;
        }

        /* Role Checkboxes in Modal */
        .roles-input-container {
            background: #f8f9fa;
            border: 1px solid #e5e5e5;
            border-radius: 8px;
            padding: 12px;
        }

        .role-checkboxes {
            display: flex;
            flex-wrap: wrap;
            gap: 12px;
        }

        .role-checkbox {
            display: flex;
            align-items: center;
            gap: 6px;
            cursor: pointer;
            font-size: 13px;
            color: #333;
        }

        .role-checkbox input[type="checkbox"] {
            width: 16px;
            height: 16px;
            border: 1px solid #d1d1d1;
            border-radius: 3px;
            cursor: pointer;
        }

        .role-checkbox input[type="checkbox"]:checked {
            background: #007aff;
            border-color: #007aff;
        }

        .role-checkbox-label {
            font-weight: 500;
            user-select: none;
        }

        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: transparent;
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(0, 0, 0, 0.3);
        }

        /* Hidden states */
        .endpoint-detail {
            display: none;
        }

        .endpoint-detail.active {
            display: block;
        }

        .no-results {
            text-align: center;
            padding: 40px 20px;
            color: #8e8e93;
            font-size: 14px;
        }

        /* Mobile Menu */
        .mobile-menu-btn {
            display: none;
            width: 28px;
            height: 28px;
            border: 1px solid #c7c7c7;
            border-radius: 6px;
            background: white;
            color: #333;
            cursor: pointer;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: background-color 0.15s ease;
        }

        .mobile-menu-btn:hover {
            background: #f0f0f0;
        }

        .mobile-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        .mobile-overlay.show {
            display: block;
        }

        /* Responsive Design */
        @media (max-width: 1024px) {
            .window {
                margin: 10px;
                height: calc(100vh - 20px);
                border-radius: 8px;
            }

            .sidebar {
                width: 260px;
            }

            .search-input {
                width: 160px;
            }
        }

        @media (max-width: 768px) {
            .window {
                margin: 0;
                height: 100vh;
                border-radius: 0;
            }

            .window-controls {
                padding: 0 16px;
            }

            .window-title {
                display: none;
            }

            .title-separator {
                display: none;
            }

            .traffic-lights {
                margin-right: auto;
            }

            .window-controls-right {
                gap: 8px;
            }

            .search-input {
                width: 140px;
                font-size: 14px;
            }

            .main-content {
                position: relative;
            }

            .sidebar {
                position: fixed;
                top: 52px;
                left: 0;
                bottom: 0;
                width: 280px;
                z-index: 1000;
                transform: translateX(-100%);
                transition: transform 0.3s ease;
                border-right: none;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            }

            .sidebar.show {
                transform: translateX(0);
            }

            .content-area {
                margin-left: 0;
            }

            .mobile-menu-btn {
                display: flex;
            }

            .content-header {
                padding: 16px 20px 12px 20px;
            }

            .endpoint-actions {
                position: static;
                margin-top: 12px;
                justify-content: flex-start;
            }

            .endpoint-title {
                flex-direction: column;
                align-items: flex-start;
                gap: 8px;
            }

            .endpoint-path-large {
                font-size: 16px;
                word-break: break-all;
            }

            .content-body {
                padding: 20px;
            }

            .param-table {
                overflow-x: auto;
            }

            .param-row {
                flex-direction: column;
                gap: 8px;
            }

            .param-name {
                min-width: auto;
                margin-right: 0;
            }

            .code-block {
                font-size: 12px;
                padding: 16px;
                overflow-x: auto;
            }

            .breadcrumb {
                flex-wrap: wrap;
                gap: 4px;
            }

            .roles-container {
                gap: 6px;
            }

            .role-badge {
                font-size: 11px;
                padding: 4px 10px;
            }
        }

        @media (max-width: 480px) {
            .window-controls {
                padding: 0 12px;
            }

            .window-controls-right {
                gap: 6px;
            }

            .search-input {
                width: 120px;
                font-size: 13px;
            }

            .add-endpoint-btn,
            .logout-btn {
                width: 24px;
                height: 24px;
                font-size: 14px;
            }

            .sidebar {
                width: 100vw;
            }

            .sidebar-user {
                padding: 10px 16px;
            }

            .sidebar-user-avatar {
                width: 28px;
                height: 28px;
                font-size: 12px;
            }

            .content-header {
                padding: 12px 16px 8px 16px;
            }

            .content-body {
                padding: 16px;
            }

            .section {
                margin-bottom: 24px;
            }

            .welcome-state {
                padding: 20px;
            }

            .welcome-icon {
                width: 48px;
                height: 48px;
                font-size: 20px;
                margin-bottom: 12px;
            }

            .welcome-title {
                font-size: 18px;
            }

            .welcome-subtitle {
                font-size: 14px;
            }

            /* Modal responsive */
            .modal {
                width: 95vw;
                margin: 20px auto;
                max-height: 90vh;
            }

            .modal-body {
                padding: 20px;
            }

            .modal-header {
                padding: 16px 20px 12px 20px;
            }

            .modal-footer {
                padding: 12px 20px 20px 20px;
                flex-direction: column;
                gap: 8px;
            }

            .btn {
                width: 100%;
                padding: 12px 16px;
            }

            .form-textarea {
                min-height: 60px;
            }

            .role-checkboxes {
                gap: 8px;
            }

            .role-checkbox {
                font-size: 12px;
            }

            .role-checkbox input[type="checkbox"] {
                width: 14px;
                height: 14px;
            }
        }

        @media (max-width: 320px) {
            .search-input {
                width: 100px;
                font-size: 12px;
            }

            .endpoint-method-large {
                font-size: 10px;
                padding: 4px 8px;
            }

            .endpoint-path-large {
                font-size: 14px;
            }

            .section-title {
                font-size: 16px;
            }

            .param-row {
                padding: 10px 12px;
            }

            .code-block {
                font-size: 11px;
                padding: 12px;
            }
        }
    </style>
  </head>
  <body>
    <div class="window">
        <!-- Window Controls -->
        <div class="window-controls">
            <div class="traffic-lights">
                <div class="traffic-light close"></div>
                <div class="traffic-light minimize"></div>
                <div class="traffic-light maximize"></div>
            </div>
            <div class="title-separator"></div>
            <div class="window-title">API Documentation</div>
            
            <div class="window-controls-right">
                <button class="mobile-menu-btn" onclick="toggleMobileMenu()" title="Menu">
                    ☰
                </button>
                <% if (user.role === 'admin') { %>
                    <button class="add-endpoint-btn" onclick="showAddEndpointModal()" title="Add Endpoint">
                        +
                    </button>
                <% } %>
                <div class="search-box">
                    <svg class="search-icon" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                    </svg>
                    <input type="text" class="search-input" placeholder="Search endpoints..." id="searchInput" oninput="searchEndpoints()" onfocus="showSearchDropdown()" onblur="hideSearchDropdown()">
                    <div class="search-dropdown" id="searchDropdown"></div>
                </div>
                
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="sidebar-content">
                    <% Object.keys(groupedEndpoints).forEach((group, index) => { %>
                        <div class="sidebar-section" data-group="<%= group %>">
                            <div class="section-header" onclick="toggleSection(this)">
                                <span><%= group %></span>
                                <span class="section-toggle">▼</span>
                            </div>
                            <div class="section-items">
                                <% groupedEndpoints[group].forEach(endpoint => { %>
                                    <div class="sidebar-item" 
                                         data-endpoint="<%= endpoint.endpoint %>" 
                                         data-method="<%= endpoint.method %>"
                                         data-description="<%= endpoint.description %>"
                                         onclick="showEndpoint('<%= endpoint.endpoint %>', '<%= endpoint.id %>')">
                                        <span class="sidebar-item-text"><%= endpoint.endpoint.split('/').pop() || endpoint.endpoint %></span>
                                        <span class="method-badge method-<%= endpoint.method.toLowerCase() %>">
                                            <%= endpoint.method %>
                                        </span>
                                    </div>
                                <% }) %>
                            </div>
                        </div>
                    <% }) %>
                    
                    <div class="no-results" id="noResults" style="display: none;">
                        No endpoints found matching your search.
                    </div>
                </div>
                
                <!-- User Info at Bottom -->
                <div class="sidebar-user">
                    <div class="sidebar-user-avatar">
                        <%= user.name.charAt(0).toUpperCase() %>
                    </div>
                    <div class="sidebar-user-info">
                        <div class="sidebar-user-name"><%= user.name %></div>
                        <div class="sidebar-user-role"><%= user.role %></div>
                    </div>
                    <button class="logout-btn" onclick="logout()" title="Logout">
                      <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-log-out"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><path d="M16 17l5-5-5-5"/><path d="M21 12H9"/></svg>
                  </button>
                </div>
            </div>

            <!-- Content Area -->
            <div class="content-area">
                <!-- Welcome State -->
                <div class="welcome-state" id="welcome-state">
                    <div class="welcome-icon">📚</div>
                    <div class="welcome-title">API Documentation</div>
                    <div class="welcome-subtitle">Select an endpoint from the sidebar to view its documentation</div>
                </div>

                <!-- Endpoint Details -->
                <% Object.keys(groupedEndpoints).forEach(group => { %>
                    <% groupedEndpoints[group].forEach(endpoint => { %>
                        <div class="endpoint-detail" id="endpoint-<%= endpoint.id %>">
                            <!-- Content Header -->
                            <div class="content-header">
                                <% if (user.role === 'admin') { %>
                                    <div class="endpoint-actions">
                                        <button class="action-btn edit" onclick="editEndpoint('<%= endpoint.id %>')" title="Edit Endpoint">
                                            ✏️
                                        </button>
                                        <button class="action-btn delete" onclick="deleteEndpoint('<%= endpoint.id %>')" title="Delete Endpoint">
                                            🗑️
                                        </button>
                                    </div>
                                <% } %>
                                
                                <div class="breadcrumb">
                                    <span class="breadcrumb-item" onclick="showWelcome()">Documentation</span>
                                    <span class="breadcrumb-separator">›</span>
                                    <span class="breadcrumb-item"><%= group %></span>
                                    <span class="breadcrumb-separator">›</span>
                                    <span><%= endpoint.endpoint.split('/').pop() || endpoint.endpoint %></span>
                                </div>
                                
                                <div class="endpoint-title">
                                    <span class="endpoint-method-large method-<%= endpoint.method.toLowerCase() %>">
                                        <%= endpoint.method %>
                                    </span>
                                    <span class="endpoint-path-large"><%= endpoint.endpoint %></span>
                                </div>
                                
                                <div class="endpoint-description">
                                    <%= endpoint.description %>
                                </div>
                            </div>

                            <!-- Content Body -->
                            <div class="content-body">
                                <% if (endpoint.roles && endpoint.roles.length > 0) { %>
                                    <div class="section">
                                        <div class="section-title">Access Roles</div>
                                        <div class="roles-container">
                                            <% endpoint.roles.forEach(role => { %>
                                                <span class="role-badge role-<%= role.toLowerCase() %>">
                                                    <%= role.charAt(0).toUpperCase() + role.slice(1) %>
                                                </span>
                                            <% }) %>
                                        </div>
                                        <div class="roles-description">
                                            This endpoint can be accessed by users with the above roles.
                                        </div>
                                    </div>
                                <% } %>

                                <% if (endpoint.body && Object.keys(endpoint.body).length > 0) { %>
                                    <div class="section">
                                        <div class="section-title">Request Body</div>
                                        <div class="param-table">
                                            <% Object.entries(endpoint.body).forEach(([key, value]) => { %>
                                                <div class="param-row">
                                                    <div class="param-name"><%= key %></div>
                                                    <div class="param-description"><%= value %></div>
                                                </div>
                                            <% }) %>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (endpoint.params && Object.keys(endpoint.params).length > 0) { %>
                                    <div class="section">
                                        <div class="section-title">URL Parameters</div>
                                        <div class="param-table">
                                            <% Object.entries(endpoint.params).forEach(([key, value]) => { %>
                                                <div class="param-row">
                                                    <div class="param-name"><%= key %></div>
                                                    <div class="param-description"><%= value %></div>
                                                </div>
                                            <% }) %>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (endpoint.query && Object.keys(endpoint.query).length > 0) { %>
                                    <div class="section">
                                        <div class="section-title">Query Parameters</div>
                                        <div class="param-table">
                                            <% Object.entries(endpoint.query).forEach(([key, value]) => { %>
                                                <div class="param-row">
                                                    <div class="param-name"><%= key %></div>
                                                    <div class="param-description"><%= value %></div>
                                                </div>
                                            <% }) %>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (endpoint.headers && Object.keys(endpoint.headers).length > 0) { %>
                                    <div class="section">
                                        <div class="section-title">Request Headers</div>
                                        <div class="param-table">
                                            <% Object.entries(endpoint.headers).forEach(([key, value]) => { %>
                                                <div class="param-row">
                                                    <div class="param-name"><%= key %></div>
                                                    <div class="param-description"><%= value %></div>
                                                </div>
                                            <% }) %>
                                        </div>
                                    </div>
                                <% } %>

                                <% if (endpoint.response) { %>
                                    <div class="section">
                                        <div class="section-title">Response</div>
                                        <div class="code-block"><%= JSON.stringify(endpoint.response, null, 2) %></div>
                                    </div>
                                <% } %>

                                <% if (endpoint.cURL) { %>
                                    <div class="section">
                                        <div class="section-title">cURL Example</div>
                                        <div class="code-block"><%= endpoint.cURL %></div>
                                    </div>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                <% }) %>
            </div>
        </div>
    </div>

    <!-- Mobile Overlay -->
    <div class="mobile-overlay" id="mobileOverlay" onclick="closeMobileMenu()"></div>

    <!-- Add/Edit Endpoint Modal -->
    <div class="modal-overlay" id="endpointModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title" id="modalTitle">Add New Endpoint</div>
                <div class="modal-subtitle">Fill in the endpoint details</div>
            </div>
            <div class="modal-body">
                <form id="endpointForm">
                    <div class="form-group">
                        <label class="form-label">Endpoint Path</label>
                        <input type="text" class="form-input" id="endpointPath" placeholder="/api/users" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">HTTP Method</label>
                        <select class="form-select" id="endpointMethod" required>
                            <option value="GET">GET</option>
                            <option value="POST">POST</option>
                            <option value="PUT">PUT</option>
                            <option value="DELETE">DELETE</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Group</label>
                        <input type="text" class="form-input" id="endpointGroup" placeholder="Users" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Access Roles</label>
                        <div class="roles-input-container">
                            <div class="role-checkboxes">
                                <label class="role-checkbox">
                                    <input type="checkbox" value="guest" id="roleGuest">
                                    <span class="role-checkbox-label">Guest</span>
                                </label>
                                <label class="role-checkbox">
                                    <input type="checkbox" value="user" id="roleUser">
                                    <span class="role-checkbox-label">User</span>
                                </label>
                                <label class="role-checkbox">
                                    <input type="checkbox" value="admin" id="roleAdmin">
                                    <span class="role-checkbox-label">Admin</span>
                                </label>
                                <label class="role-checkbox">
                                    <input type="checkbox" value="moderator" id="roleModerator">
                                    <span class="role-checkbox-label">Moderator</span>
                                </label>
                                <label class="role-checkbox">
                                    <input type="checkbox" value="developer" id="roleDeveloper">
                                    <span class="role-checkbox-label">Developer</span>
                                </label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea class="form-textarea" id="endpointDescription" placeholder="Endpoint description" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Request Body (JSON)</label>
                        <textarea class="form-textarea" id="endpointBody" placeholder='{"name": "User name", "email": "User email"}'></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">URL Parameters (JSON)</label>
                        <textarea class="form-textarea" id="endpointParams" placeholder='{"id": "User ID"}'></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Query Parameters (JSON)</label>
                        <textarea class="form-textarea" id="endpointQuery" placeholder='{"page": "Page number", "limit": "Items per page"}'></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Request Headers (JSON)</label>
                        <textarea class="form-textarea" id="endpointHeaders" placeholder='{"Content-Type": "application/json", "Authorization": "Bearer token"}'></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Response Example (JSON)</label>
                        <textarea class="form-textarea" id="endpointResponse" placeholder='{"success": true, "data": {}}'></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">cURL Example</label>
                        <textarea class="form-textarea" id="endpointCurl" placeholder='curl -X GET "http://localhost:3000/api/users"'></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="saveEndpoint()">Save</button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal-overlay" id="deleteModal">
        <div class="modal">
            <div class="modal-header">
                <div class="modal-title">Delete Endpoint</div>
                <div class="modal-subtitle">This action cannot be undone</div>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this endpoint?</p>
                <p><strong id="deleteEndpointName"></strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeDeleteModal()">Cancel</button>
                <button type="button" class="btn btn-danger" onclick="confirmDelete()">Delete</button>
            </div>
        </div>
    </div>

    <script>
        let currentEndpointId = null;
        let deleteEndpointId = null;
        let allEndpoints = [];
        let searchTimeout = null;

        // Initialize endpoints data
        document.addEventListener('DOMContentLoaded', function() {
            // Collect all endpoints data
            const sections = document.querySelectorAll('.sidebar-section');
            sections.forEach(section => {
                const items = section.querySelectorAll('.sidebar-item');
                items.forEach(item => {
                    allEndpoints.push({
                        id: item.onclick.toString().match(/'([^']+)'/g)[1].replace(/'/g, ''),
                        endpoint: item.dataset.endpoint,
                        method: item.dataset.method,
                        description: item.dataset.description,
                        group: section.dataset.group,
                        element: item
                    });
                });
            });
        });

        // Search functionality with dropdown
        function searchEndpoints() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            const dropdown = document.getElementById('searchDropdown');
            
            // Clear previous timeout
            if (searchTimeout) {
                clearTimeout(searchTimeout);
            }

            // Debounce search
            searchTimeout = setTimeout(() => {
                if (searchTerm.length === 0) {
                    dropdown.classList.remove('show');
                    resetSidebarView();
                    return;
                }

                // Filter endpoints
                const matches = allEndpoints.filter(endpoint => {
                    return endpoint.endpoint.toLowerCase().includes(searchTerm) ||
                           endpoint.method.toLowerCase().includes(searchTerm) ||
                           endpoint.description.toLowerCase().includes(searchTerm) ||
                           endpoint.group.toLowerCase().includes(searchTerm);
                });

                // Update dropdown
                updateSearchDropdown(matches);
                
                // Update sidebar
                updateSidebarView(matches);
            }, 150);
        }

        function updateSearchDropdown(matches) {
            const dropdown = document.getElementById('searchDropdown');
            
            if (matches.length === 0) {
                dropdown.innerHTML = '<div style="padding: 12px; text-align: center; color: #8e8e93; font-size: 12px;">No endpoints found</div>';
            } else {
                dropdown.innerHTML = matches.slice(0, 8).map(endpoint => `
                    <div class="search-result" onclick="selectSearchResult('${endpoint.id}', '${endpoint.endpoint}')">
                        <span class="search-result-method method-${endpoint.method.toLowerCase()}">${endpoint.method}</span>
                        <div class="search-result-text">
                            <div class="search-result-endpoint">${endpoint.endpoint}</div>
                            <div class="search-result-description">${endpoint.description}</div>
                        </div>
                    </div>
                `).join('');
            }
            
            dropdown.classList.add('show');
        }

        function updateSidebarView(matches) {
            const sections = document.querySelectorAll('.sidebar-section');
            const noResults = document.getElementById('noResults');
            let hasVisibleItems = false;

            sections.forEach(section => {
                const items = section.querySelectorAll('.sidebar-item');
                let sectionHasVisible = false;

                items.forEach(item => {
                    const isMatch = matches.some(match => 
                        match.endpoint === item.dataset.endpoint && 
                        match.method === item.dataset.method
                    );

                    if (isMatch) {
                        item.classList.remove('hidden');
                        sectionHasVisible = true;
                        hasVisibleItems = true;
                    } else {
                        item.classList.add('hidden');
                    }
                });

                // Show/hide section based on whether it has visible items
                if (sectionHasVisible) {
                    section.style.display = 'block';
                    // Expand section if it has matches
                    const sectionItems = section.querySelector('.section-items');
                    const sectionHeader = section.querySelector('.section-header');
                    if (sectionItems.classList.contains('collapsed')) {
                        sectionItems.classList.remove('collapsed');
                        sectionHeader.classList.remove('collapsed');
                    }
                } else {
                    section.style.display = 'none';
                }
            });

            // Show/hide no results message
            noResults.style.display = (!hasVisibleItems) ? 'block' : 'none';
        }

        function resetSidebarView() {
            const sections = document.querySelectorAll('.sidebar-section');
            const noResults = document.getElementById('noResults');

            sections.forEach(section => {
                section.style.display = 'block';
                const items = section.querySelectorAll('.sidebar-item');
                items.forEach(item => {
                    item.classList.remove('hidden');
                });
            });

            noResults.style.display = 'none';
        }

        function selectSearchResult(endpointId, endpoint) {
            // Clear search
            document.getElementById('searchInput').value = '';
            document.getElementById('searchDropdown').classList.remove('show');
            resetSidebarView();
            
            // Show endpoint
            showEndpoint(endpoint, endpointId);
        }

        function showSearchDropdown() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            if (searchTerm.length > 0) {
                searchEndpoints();
            }
        }

        function hideSearchDropdown() {
            // Delay hiding to allow click events on dropdown items
            setTimeout(() => {
                document.getElementById('searchDropdown').classList.remove('show');
            }, 200);
        }

        function logout() {
            if (confirm('Are you sure you want to logout?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/logout';
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Mobile menu functions
        function toggleMobileMenu() {
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.getElementById('mobileOverlay');
            
            if (sidebar.classList.contains('show')) {
                closeMobileMenu();
            } else {
                openMobileMenu();
            }
        }

        function openMobileMenu() {
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.getElementById('mobileOverlay');
            
            sidebar.classList.add('show');
            overlay.classList.add('show');
            document.body.style.overflow = 'hidden';
        }

        function closeMobileMenu() {
            const sidebar = document.querySelector('.sidebar');
            const overlay = document.getElementById('mobileOverlay');
            
            sidebar.classList.remove('show');
            overlay.classList.remove('show');
            document.body.style.overflow = '';
        }

        // Close mobile menu when clicking on sidebar items
        function showEndpoint(endpoint, endpointId) {
            // Close mobile menu if open
            if (window.innerWidth <= 768) {
                closeMobileMenu();
            }
            
            // Hide welcome state
            document.getElementById('welcome-state').style.display = 'none';
            
            // Hide all endpoint details
            document.querySelectorAll('.endpoint-detail').forEach(el => {
                el.classList.remove('active');
            });
            
            // Show selected endpoint
            const targetElement = document.getElementById('endpoint-' + endpointId);
            if (targetElement) {
                targetElement.classList.add('active');
            }
            
            // Update sidebar selection
            document.querySelectorAll('.sidebar-item').forEach(el => {
                el.classList.remove('selected');
            });
            event.target.closest('.sidebar-item').classList.add('selected');
        }

        // Handle window resize
        window.addEventListener('resize', function() {
            if (window.innerWidth > 768) {
                closeMobileMenu();
            }
        });

        function toggleSection(header) {
            const items = header.nextElementSibling;
            const isCollapsed = items.classList.contains('collapsed');
            
            if (isCollapsed) {
                items.classList.remove('collapsed');
                header.classList.remove('collapsed');
            } else {
                items.classList.add('collapsed');
                header.classList.add('collapsed');
            }
        }

        function showEndpoint(endpoint, endpointId) {
            // Hide welcome state
            document.getElementById('welcome-state').style.display = 'none';
            
            // Hide all endpoint details
            document.querySelectorAll('.endpoint-detail').forEach(el => {
                el.classList.remove('active');
            });
            
            // Show selected endpoint
            const targetElement = document.getElementById('endpoint-' + endpointId);
            if (targetElement) {
                targetElement.classList.add('active');
            }
            
            // Update sidebar selection
            document.querySelectorAll('.sidebar-item').forEach(el => {
                el.classList.remove('selected');
            });
            event.target.closest('.sidebar-item').classList.add('selected');
        }

        function showWelcome() {
            // Hide all endpoint details
            document.querySelectorAll('.endpoint-detail').forEach(el => {
                el.classList.remove('active');
            });
            
            // Show welcome state
            document.getElementById('welcome-state').style.display = 'flex';
            
            // Clear sidebar selection
            document.querySelectorAll('.sidebar-item').forEach(el => {
                el.classList.remove('selected');
            });
        }

        function showAddEndpointModal() {
            currentEndpointId = null;
            document.getElementById('modalTitle').textContent = 'Add New Endpoint';
            document.getElementById('endpointForm').reset();
            
            // Clear all role checkboxes
            const roleCheckboxes = document.querySelectorAll('.role-checkbox input[type="checkbox"]');
            roleCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            document.getElementById('endpointModal').style.display = 'flex';
        }

        function editEndpoint(endpointId) {
            currentEndpointId = endpointId;
            document.getElementById('modalTitle').textContent = 'Edit Endpoint';
            
            // Fetch endpoint data and populate form
            fetch(`/api/endpoints`)
                .then(response => response.json())
                .then(endpoints => {
                    const endpoint = endpoints.find(e => e.id === endpointId);
                    if (endpoint) {
                        document.getElementById('endpointPath').value = endpoint.endpoint || '';
                        document.getElementById('endpointMethod').value = endpoint.method || 'GET';
                        document.getElementById('endpointGroup').value = endpoint.group || '';
                        document.getElementById('endpointDescription').value = endpoint.description || '';
                        document.getElementById('endpointBody').value = endpoint.body ? JSON.stringify(endpoint.body, null, 2) : '';
                        document.getElementById('endpointParams').value = endpoint.params ? JSON.stringify(endpoint.params, null, 2) : '';
                        document.getElementById('endpointQuery').value = endpoint.query ? JSON.stringify(endpoint.query, null, 2) : '';
                        document.getElementById('endpointHeaders').value = endpoint.headers ? JSON.stringify(endpoint.headers, null, 2) : '';
                        document.getElementById('endpointResponse').value = endpoint.response ? JSON.stringify(endpoint.response, null, 2) : '';
                        document.getElementById('endpointCurl').value = endpoint.cURL || '';
                        
                        // Set roles checkboxes
                        const roleCheckboxes = document.querySelectorAll('.role-checkbox input[type="checkbox"]');
                        roleCheckboxes.forEach(checkbox => {
                            checkbox.checked = endpoint.roles && endpoint.roles.includes(checkbox.value);
                        });
                    }
                })
                .catch(error => {
                    console.error('Error fetching endpoint:', error);
                    alert('Error loading endpoint data');
                });
            
            document.getElementById('endpointModal').style.display = 'flex';
        }

        function deleteEndpoint(endpointId) {
            deleteEndpointId = endpointId;
            
            // Fetch endpoint data to show name in confirmation
            fetch(`/api/endpoints`)
                .then(response => response.json())
                .then(endpoints => {
                    const endpoint = endpoints.find(e => e.id === endpointId);
                    if (endpoint) {
                        document.getElementById('deleteEndpointName').textContent = 
                            `${endpoint.method} ${endpoint.endpoint}`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching endpoint:', error);
                });
            
            document.getElementById('deleteModal').style.display = 'flex';
        }

        function closeModal() {
            document.getElementById('endpointModal').style.display = 'none';
            currentEndpointId = null;
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').style.display = 'none';
            deleteEndpointId = null;
        }

        function saveEndpoint() {
            const formData = {
                endpoint: document.getElementById('endpointPath').value,
                method: document.getElementById('endpointMethod').value,
                group: document.getElementById('endpointGroup').value,
                description: document.getElementById('endpointDescription').value
            };

            // Get selected roles
            const selectedRoles = [];
            const roleCheckboxes = document.querySelectorAll('.role-checkbox input[type="checkbox"]:checked');
            roleCheckboxes.forEach(checkbox => {
                selectedRoles.push(checkbox.value);
            });
            if (selectedRoles.length > 0) {
                formData.roles = selectedRoles;
            }

            // Parse JSON fields
            try {
                const bodyText = document.getElementById('endpointBody').value.trim();
                if (bodyText) formData.body = JSON.parse(bodyText);
                
                const paramsText = document.getElementById('endpointParams').value.trim();
                if (paramsText) formData.params = JSON.parse(paramsText);
                
                const queryText = document.getElementById('endpointQuery').value.trim();
                if (queryText) formData.query = JSON.parse(queryText);
                
                const headersText = document.getElementById('endpointHeaders').value.trim();
                if (headersText) formData.headers = JSON.parse(headersText);
                
                const responseText = document.getElementById('endpointResponse').value.trim();
                if (responseText) formData.response = JSON.parse(responseText);
                
                const curlText = document.getElementById('endpointCurl').value.trim();
                if (curlText) formData.cURL = curlText;
            } catch (error) {
                alert('Invalid JSON format in one of the fields');
                return;
            }

            const url = currentEndpointId ? `/api/endpoints/${currentEndpointId}` : '/api/endpoints';
            const method = currentEndpointId ? 'PUT' : 'POST';

            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh page to show changes
                } else {
                    alert('Error saving endpoint: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error saving endpoint');
            });
        }

        function confirmDelete() {
            if (!deleteEndpointId) return;

            fetch(`/api/endpoints/${deleteEndpointId}`, {
                method: 'DELETE'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload(); // Refresh page to show changes
                } else {
                    alert('Error deleting endpoint: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error deleting endpoint');
            });
        }

        // Close modals when clicking outside
        document.getElementById('endpointModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });

        document.getElementById('deleteModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeDeleteModal();
            }
        });

        // Initialize collapsed state for sections
        document.addEventListener('DOMContentLoaded', function() {
            // All sections start expanded by default
        });
    </script>
  </body>
</html>
